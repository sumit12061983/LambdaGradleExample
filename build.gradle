def awsProfileName="MyExperimentUser"
def roleName="arn:aws:iam::927077548640:role/service-role/addNumbersRole"
def lambdaFunctionName= "gradle-lambda-add-numbers"
def handlerName="AddNumbers"
def jsonPayload="{\"num1\": 17, \"num2\": -3}"

import com.amazonaws.services.lambda.model.InvocationType
import com.amazonaws.services.lambda.model.LogType
import com.amazonaws.services.lambda.model.Runtime
import jp.classmethod.aws.gradle.lambda.AWSLambdaInvokeTask
import jp.classmethod.aws.gradle.lambda.AWSLambdaMigrateFunctionTask

group 'com.example'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'jp.classmethod.aws.lambda'

sourceCompatibility = 1.8

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "jp.classmethod.aws:gradle-aws-plugin:0.30"
    }
}

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    // AWS Lambda
    compile group: 'com.amazonaws', name: 'aws-lambda-java-core', version: '1.1.0'
    compile group: 'com.amazonaws', name: 'aws-lambda-java-events', version: '1.3.0'
    // Logging
    compile group: 'com.amazonaws', name: 'aws-lambda-java-log4j', version: '1.0.0'
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.9.6'
}

task buildZip(type: Zip, dependsOn: test){
    from compileJava
    from processResources
    into('lib'){
        from configurations.runtime
    }
}

aws {
    profileName = awsProfileName
}

task deploy(type: AWSLambdaMigrateFunctionTask, dependsOn: build) {
    functionName = lambdaFunctionName
    handler = handlerName
    role = roleName
    runtime = Runtime.Java8
    zipFile = buildZip.archivePath
    memorySize = 128
    timeout = 15
}

task invoke(type: AWSLambdaInvokeTask) {
    functionName = lambdaFunctionName
    invocationType = InvocationType.RequestResponse
    logType = LogType.Tail
    payload = jsonPayload
    doLast {
        println "Status code: " + invokeResult.statusCode
        println "Log result: " + new String(Base64.getDecoder().decode(invokeResult.logResult))
        println "Lambda function result: " + new String(invokeResult.payload.array(), "UTF-8")
    }
}

build.dependsOn buildZip